import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:mindcare_plus/core/utils/size_utils.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimary.withOpacity(1),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.blue50,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(11.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.onPrimary.withOpacity(1);
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.onPrimary.withOpacity(1);
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.blueGray5001,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.blueGray500,
          fontSize: 16.fSize,
          fontFamily: 'GT Walsheim Pro',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.blueGray500,
          fontSize: 14.fSize,
          fontFamily: 'GT Walsheim Pro',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray500.withOpacity(0.49),
          fontSize: 12.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: Color(0XFFFFFFFF),
          fontSize: 34.fSize,
          fontFamily: 'GT Walsheim Pro',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.gray900,
          fontSize: 24.fSize,
          fontFamily: 'GT Walsheim Pro',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.blueGray500,
          fontSize: 12.fSize,
          fontFamily: 'GT Walsheim Pro',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.gray900,
          fontSize: 20.fSize,
          fontFamily: 'GT Walsheim Pro',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: appTheme.blueGray90001,
          fontSize: 16.fSize,
          fontFamily: 'GT Walsheim Pro',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.blueGray500,
          fontSize: 14.fSize,
          fontFamily: 'GT Walsheim Pro',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF0040DD),
    primaryContainer: Color(0XFFCFD4DC),

    // Error colors
    errorContainer: Color(0XFF6838EE),
    onError: Color(0XFFD70015),
    onErrorContainer: Color(0XFF101222),

    // On colors(text colors)
    onPrimary: Color(0X99FFFFFF),
    onPrimaryContainer: Color(0XFF1D2838),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber200 => Color(0XFFFEDE88);

  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue100 => Color(0XFFC6D7FE);
  Color get blue50 => Color(0XFFEEF3FF);
  Color get blue5001 => Color(0XFFDFEAFF);
  Color get blue600 => Color(0XFF156FEE);
  Color get blue800 => Color(0XFF175CD3);
  Color get blue80001 => Color(0XFF0052CC);
  Color get blueA200 => Color(0XFF448AF7);

  // BlueGray
  Color get blueGray100 => Color(0XFFD5D9EB);
  Color get blueGray300 => Color(0XFF98A1B2);
  Color get blueGray50 => Color(0XFFE8EDF1);
  Color get blueGray500 => Color(0XFF667084);
  Color get blueGray5001 => Color(0XFFEAECF0);
  Color get blueGray700 => Color(0XFF353E72);
  Color get blueGray70001 => Color(0XFF4F5E71);
  Color get blueGray70002 => Color(0XFF475466);
  Color get blueGray800 => Color(0XFF283056);
  Color get blueGray80001 => Color(0XFF344053);
  Color get blueGray900 => Color(0XFF091E42);
  Color get blueGray90001 => Color(0XFF252A31);

  // BlueGrayf
  Color get blueGray8000f => Color(0X0F1B3B54);

  // DeepOrange
  Color get deepOrange50 => Color(0XFFFEE3E1);

  // DeepPurple
  Color get deepPurple400 => Color(0XFF7E56D8);
  Color get deepPurple50 => Color(0XFFE9D7FE);
  Color get deepPurple500 => Color(0XFF6840C6);
  Color get deepPurple5001 => Color(0XFFEAE8FE);

  // Gray
  Color get gray100 => Color(0XFFF2F3F6);
  Color get gray200 => Color(0XFFE9E9EB);
  Color get gray20001 => Color(0XFFEFEFF0);
  Color get gray300 => Color(0XFFDFE1E6);
  Color get gray30001 => Color(0XFFE6E4EA);
  Color get gray50 => Color(0XFFF7F7FA);
  Color get gray500 => Color(0XFF9A99A2);
  Color get gray5001 => Color(0XFFFBFCFC);
  Color get gray5002 => Color(0XFFF8F9FB);
  Color get gray800 => Color(0XFF3C3C43);
  Color get gray900 => Color(0XFF0F1728);
  Color get gray90001 => Color(0XFF232326);

  // GrayEf
  Color get gray50Ef => Color(0XEFF9F9F9);

  // Graye
  Color get gray6001e => Color(0X1E767680);

  // Grayc
  Color get gray9000c => Color(0X0C101828);

  // Green
  Color get greenA100 => Color(0XFFA6F4C5);
  Color get greenA700 => Color(0XFF12B669);

  // Indigo
  Color get indigo50 => Color(0XFFEAEBF5);
  Color get indigo500 => Color(0XFF3537CC);
  Color get indigo5001 => Color(0XFFD9D5FE);
  Color get indigo700 => Color(0XFF3E4783);
  Color get indigo900 => Color(0XFF273569);
  Color get indigoA400 => Color(0XFF444CE6);

  // LightBlue
  Color get lightBlue100 => Color(0XFFB2DDFF);
  Color get lightBlue10001 => Color(0XFFB9E5FD);
  Color get lightBlue200 => Color(0XFF84CAFF);
  Color get lightBlue50 => Color(0XFFDFF2FE);
  Color get lightBlue5001 => Color(0XFFD1E9FF);
  Color get lightBlue700 => Color(0XFF0085C9);

  // Orange
  Color get orange100 => Color(0XFFFDDCAA);
  Color get orange50 => Color(0XFFFFEAD5);
  Color get orange800 => Color(0XFFDB6803);
  Color get orange900 => Color(0XFFEC4909);

  // Pink
  Color get pink400 => Color(0XFFDC2590);
  Color get pink50 => Color(0XFFFBCEEE);
  Color get pinkA700 => Color(0XFFC01573);

  // Purple
  Color get purple50 => Color(0XFFF4EBFF);
  Color get purple5001 => Color(0XFFFCE6F5);

  // Red
  Color get red100 => Color(0XFFFECDC9);
  Color get red500 => Color(0XFFF04437);
  Color get red50001 => Color(0XFFEA4335);
  Color get red50002 => Color(0XFFFF3B30);
  Color get red700 => Color(0XFFD92C20);

  // Teal
  Color get teal50 => Color(0XFFD0FADF);
  Color get teal700 => Color(0XFF039754);
  Color get teal800 => Color(0XFF027947);

  // Yellow
  Color get yellow100 => Color(0XFFFEEFC6);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
